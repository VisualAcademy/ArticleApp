@page "/Articles/Manage"

@using ArticleApp.Models

@inject IArticleRepository ArticleRepository

@using Dul.Web
@using Dul.Domain.Common

@using ArticleApp.Pages.Articles.Components

@inject IJSRuntime JSRuntime

<h3>Manage</h3>

<div>
    <a href="/Articles/Create" class="btn btn-primary">Create(Page)</a>
    <input type="button" value="Create(Modal)" class="btn btn-primary" 
           data-toggle="modal" data-target="#articleEditDialog" @onclick="btnCreate_Click" />
</div>

@if (articles == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-bordered table-hover">
        <thead class="thead-light">
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>Created</th>
                <th>&nbsp;</th>
                <th>IsPinned</th>
                <th>&nbsp;</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var article in articles)
            {
            <tr>
                <td>@article.Id</td>
                <td>@article.Title</td>
                <td>@article.Created.ToShortTimeString()</td>
                <td>
                    <a href="/Articles/Details/@article.Id" class="btn btn-light">Details</a>
                    <a href="/Articles/Edit/@article.Id" class="btn btn-light">Edit</a>
                    <a href="/Articles/Delete/@article.Id" class="btn btn-light">Delete</a>
                </td>
                <td>@(article.IsPinned ? "공지" : "")</td>
                <td>
                    <input type="button" value="공지글로 올리기" class="btn btn-light" @onclick="@(() => PinnedBy(article))" />
                </td>
                <td>
                    <input type="button" value="Edit" class="btn btn-danger" data-toggle="modal" data-target="#articleEditDialog"
                           @onclick="(() => EditBy(article))" />
                </td>
                <td>
                    <input type="button" value="Delete" class="btn btn-danger" data-toggle="modal" data-target="#articleDeleteDialog"
                           @onclick="(() => DeleteBy(article))" />
                </td>
            </tr>
            }
        </tbody>
    </table>
}

<ArticlePager Model="pager" PageIndexChanged="PageIndexChanged"></ArticlePager>

<ArticleDeleteDialog OnClick="btnDelete_Click"></ArticleDeleteDialog>

<ArticleEditorForm Model="@_article" SaveOrUpdated="SaveOrUpdated">
    <EditorFormTitle>@editorFormTitle</EditorFormTitle>
</ArticleEditorForm>

@if (isShow)
{
    <div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">공지글로 올리기</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="btnClose_Click">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>@(_article.Id)번 글을 공지글로 설정할까요?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="btnTogglePinned_Click">설정</button>
                    <button type="button" class="btn btn-secondary" @onclick="btnClose_Click">닫기</button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    private void btnCreate_Click()
    { 
        editorFormTitle = "글쓰기";
        _article = new Article(); // 모델 클리어
    }

    private string editorFormTitle = "";

    private void EditBy(Article article)
    {
        editorFormTitle = "수정하기";
        _article = article;
    }

    /// <summary>
    /// 저장 또는 수정 후 데이터 다시 읽어오기
    /// </summary>
    private async void SaveOrUpdated()
    {
        var pagingData = await ArticleRepository.GetAllAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalRecords;
        articles = pagingData.Records.ToList();

        StateHasChanged();
    }

    /// <summary>
    /// 삭제 -> 모달 폼 닫기 -> 선택했던 데이터 초기화 -> 전체 데이터 다시 읽어오기 -> Refresh
    /// </summary>
    private async void btnDelete_Click()
    {
        await ArticleRepository.DeleteArticleAsync(_article.Id); // 삭제 
        await JSRuntime.InvokeAsync<object>("closeModal", "articleDeleteDialog"); // _Host.cshtml
        _article = new Article(); // 선택 항목 초기화 

        var pagingData = await ArticleRepository.GetAllAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalRecords;
        articles = pagingData.Records.ToList();

        StateHasChanged();
    }

    private void DeleteBy(Article article)
    {
        _article = article;
    }

    /* Notice Modal */
    private Article _article = new Article(); // 선택항 항목 관리

    private bool isShow = false; // Notice Modal

    private void PinnedBy(Article article)
    {
        _article = article;
        isShow = true; // 창 열기 
        //JSRuntime.InvokeAsync<object>("alert", $"{article.Id}를 공지글로 설정합니다.");
    }

    private void btnClose_Click()
    {
        isShow = false; // 창 닫기 
        _article = new Article(); // 선택했던 모델 초기화
    }

    private async void btnTogglePinned_Click()
    {
        _article.IsPinned = !_article.IsPinned; // Toggle
        await ArticleRepository.EditArticleAsync(_article);

        PagingResult<Article> pagingData = await ArticleRepository.GetAllAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalRecords; // 총 레코드 수
        articles = pagingData.Records.ToList(); // 페이징 처리된 레코드

        isShow = false; // Modal Close
        StateHasChanged(); // Refresh
    }
    /* Notice Modal */

    // 페이저 기본값 설정
    private PagerBase pager = new PagerBase()
    {
        PageNumber = 1,
        PageIndex = 0,
        PageSize = 2,
        PagerButtonCount = 3
    };

    private List<Article> articles;

    protected override async Task OnInitializedAsync()
    {
        //[1] 전체 데이터 모두 출력
        //articles = await ArticleRepository.GetArticlesAsync();

        //[2] 페이징 처리된 데이터만 출력
        PagingResult<Article> pagingData = await ArticleRepository.GetAllAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalRecords; // 총 레코드 수
        articles = pagingData.Records.ToList(); // 페이징 처리된 레코드
    }

    // Pager 버튼 클릭 콜백 메서드
    private async void PageIndexChanged(int pageIndex)
    {
        pager.PageIndex = pageIndex;
        pager.PageNumber = pageIndex + 1;

        var pagingData = await ArticleRepository.GetAllAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalRecords; // 총 레코드 수
        articles = pagingData.Records.ToList(); // 페이징 처리된 레코드

        StateHasChanged(); // 현재 컴포넌트 재로드(Pager Refresh)
    }
}
